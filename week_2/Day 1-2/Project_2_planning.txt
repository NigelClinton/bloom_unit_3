## INSTRUCTIONS ##

# Reproduce (debugging as needed) the live lecture task of setting up and inserting the RPG data into a PostgreSQL database. 
# We walked through most of these steps in lesson but see if you can finish moving the charactercreator_character table.

# Next, set up a new table for the Titanic data (titanic.csv) - spend some time thinking about the schema to make sure it is appropriate for the columns. 
# Enumerated types may be useful. Once it is set up, write a insert_titanic.py script that uses psycopg2 to connect to and upload the data from the csv. 
# Then add the file to your repo. Fianlly, start writing PostgreSQL queries to explore the data!

# Please upload the insert_titanic.py python file to Canvas.

#==============================================================================================

### Dtypes of titanic CSV ###

Survived = int

Pclass = int

Name = varchar(50)

Sex = varchar(6)

Age = int

Siblings/Spouses Aboard = int

Parents/Children Aboard = int

Fare = money

#==========================================================================================

### Code for titanic CSV ###

#import libaries
import sqlite3
import psycopg2

#Create SQLite DB?

#Create connection to database
s_conn = sqlite3.connect("titanic.sqlite3")

#Create cursor
s_cur = s_conn.cursor()

#create rows for database 
rows = s_cur.execute("SELECT Survived,Pclass,Name,Sex,Age,Siblings/Spouses Aboard,Parents/Children Aboard,Fare from titanic;").fetchall()

#Create connection variables
dbname = "wtjnvyve"
user = "wtjnvyve"
password = "APZ5ovhYkyOh9P0ml48zitzoclq9mI0r"
host = "chunee.db.elephantsql.com"

#Create cursor object
p_cur = p_con.cursor()

#Create titanic table - 
p_cur.execute("""
    CREATE TABLE titanic (
        index SERIAL PRIMARY KEY,
        Survived INTEGER,
        Pclass INTEGER,
        Name VARCHAR(50),
        Sex VARCHAR(6),
        Age INTEGER,
        Siblings_Spouses_Aboard INTEGER,
        Parents_Children_Aboard INTEGER,
        Fare MONEY)
    """)
)

#assign values, then populate them using the insert variable function using the INSERT function
values = ','.join(['%s']*len*(rows))
insert_query = 'INSERT INTO titanic (Survived,Pclass,Name,Sex,Age,Siblings/Spouses Aboard,Parents/Children Aboard,Fare) values{}'.format(values)

#Cursor execute query command
p_cur.execute(insert_query, rows)

#specification for the table that the fetch function will be targeting
p_cur.execute("SELECT * FROM titanic;")

#Fetch all to show all records inserted using the functions above
p_cur.fetchall()

#Commit the changes / records inserted to the database
p_con.commit()

#close connection
conn.close()

#==========================================================================================

## QUESTIONS ##

# Does index work as a priamry key? Or, what do I use to assign a key if there is none?
# How do I go about xfering the csv to SQLite?